<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledge snippet | Edo</title>
    <link>https://edoardocostantini.github.io/category/knowledge-snippet/</link>
      <atom:link href="https://edoardocostantini.github.io/category/knowledge-snippet/index.xml" rel="self" type="application/rss+xml" />
    <description>Knowledge snippet</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 22 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://edoardocostantini.github.io/media/icon_hud9fa8ac6cd4a8ee42e0d32197c4c8f6f_199053_512x512_fill_lanczos_center_3.png</url>
      <title>Knowledge snippet</title>
      <link>https://edoardocostantini.github.io/category/knowledge-snippet/</link>
    </image>
    
    <item>
      <title>Understanding the residual standard error</title>
      <link>https://edoardocostantini.github.io/post/residual-standard-error/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://edoardocostantini.github.io/post/residual-standard-error/</guid>
      <description>
&lt;script src=&#34;https://edoardocostantini.github.io/post/residual-standard-error/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The residual standard error is a measure of fit for linear regression models.
Conceptually, it can be thought of as the variability of the prediction error for a linear model.
It is usually calculated as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
SE_{resid} = \sqrt{ \frac{ \sum^{n}_{i = 1}(y_i - \hat{y}_i)^2 }{df_{resid}} }
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is the sample size&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; is the number of parameters to estimate in the model&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(-1\)&lt;/span&gt; is the degree of freedom lost to estimate the intercept&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; is the fitted &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; value for the &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;-th individual&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(df_{resid}\)&lt;/span&gt; is the degrees of freedom of the residuals (&lt;span class=&#34;math inline&#34;&gt;\(n - k - 1\)&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The smaller the residual standard error, the better the model fits the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-by-coding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Learn by coding&lt;/h2&gt;
&lt;p&gt;We can compute the residual standard error manually after estimating a linear model in R.
To get a better grasp of the residual standard error, letâ€™s start by regressing the miles per gallon (mpg) on the number of cylinders (cyl), horsepower (hp), and weight (wt) of cars from the standard &lt;code&gt;mtcars&lt;/code&gt; R dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fit a linear model -----------------------------------------------------------

lm_fit &amp;lt;- lm(mpg ~ cyl + hp + wt, data = mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can compute the residual standard error following the formula described above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute the residual standard error manually ---------------------------------

  # Define elements of the formula
  n &amp;lt;- nrow(mtcars) # sample size
  k &amp;lt;- 3            # number of parameters (regression coefficients)
  yhat &amp;lt;- fitted(lm_fit) # fitted y values
  y &amp;lt;- mtcars$mpg

  # Compute rse
  rse &amp;lt;- sqrt(sum((y - yhat)^2) / (n - k - 1))

  # Print rse
  rse&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.511548&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also extract it directly from any &lt;code&gt;lm&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# residual standard error from lm output ---------------------------------------

  # Use the sigma function to extract it from an lm object
  sigma(lm_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.511548&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Compare with the manual computation
  sigma(lm_fit) - rse&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr-just-give-me-the-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;TL;DR, just give me the code!&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fit a linear model -----------------------------------------------------------

lm_fit &amp;lt;- lm(mpg ~ cyl + hp + wt, data = mtcars)

# Compute the residual standard error manually ---------------------------------

  # Define elements of the formula
  n &amp;lt;- nrow(mtcars) # sample size
  k &amp;lt;- 3            # number of parameters (regression coefficients)
  yhat &amp;lt;- fitted(lm_fit) # fitted y values
  y &amp;lt;- mtcars$mpg

  # Compute rse
  rse &amp;lt;- sqrt(sum((y - yhat)^2) / (n - k - 1))

  # Print rse
  rse

# residual standard error from lm output ---------------------------------------

  # Use the sigma function to extract it from an lm object
  sigma(lm_fit)

  # Compare with the manual computation
  sigma(lm_fit) - rse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statology.org/how-to-interpret-residual-standard-error/&#34;&gt;Statology: How to Interpret Residual Standard Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statology.org/residual-standard-error-r/&#34;&gt;Statology: How to Calculate Residual Standard Error in R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
