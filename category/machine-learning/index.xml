<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning | Edo</title>
    <link>https://edoardocostantini.github.io/category/machine-learning/</link>
      <atom:link href="https://edoardocostantini.github.io/category/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>Machine Learning</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 22 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://edoardocostantini.github.io/media/icon_hubc644763d821b4643633e77d54abca59_619947_512x512_fill_lanczos_center_3.png</url>
      <title>Machine Learning</title>
      <link>https://edoardocostantini.github.io/category/machine-learning/</link>
    </image>
    
    <item>
      <title>Cross-entropy as a measure of predictive performance</title>
      <link>https://edoardocostantini.github.io/post/cross-entropy/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://edoardocostantini.github.io/post/cross-entropy/</guid>
      <description>
&lt;script src=&#34;https://edoardocostantini.github.io/post/cross-entropy/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;

&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Cross-entropy (CE) quantifies the difference between two probability distributions.
As such, it comes in handy as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Loss_function&#34;&gt;loss function&lt;/a&gt; in multi-class classification tasks (e.g., multinomial logistic regression).
It also provides an elegant solution for determining the difference between actual and predicted categorical data point values.
It can be used to determine the predictive performance of a classification model.
The value of the cross-entropy is higher when the predicted classes diverge more from the true labels.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-by-coding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Learn by coding&lt;/h2&gt;
&lt;p&gt;In a multiclass-classification task, we calculate a separate “loss” for each class for each observation and sum the result:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:CE&#34;&gt;\[
CE = - \sum^{N}_{i = 1} \sum^{K}_{k = 1} p_{(i, k)}log(\hat{p}_{(i, k)}) \tag{1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; is the sample size.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; is the number of categories of the variable we are trying to predict.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; is a scalar taking value &lt;span class=&#34;math inline&#34;&gt;\(0 = \text{no}\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(1 = \text{yes}\)&lt;/span&gt; to indicate whether observation &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; belongs to class &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;. This can also be thought of as the true probability of the observation belonging to that class.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(\hat{p}\)&lt;/span&gt; is a scalar indicating the predicted probability of observation &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; belonging to class &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(log\)&lt;/span&gt; is the natural logarithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s see an example in R.
The &lt;code&gt;iris&lt;/code&gt; data records the petal and sepal dimensions for 150 and their species.
Consider the task of predicting the flowers’ species based on all the numeric predictors available.
We will fit a multinomial logistic regression on the data and compute the cross-entropy between the observed and predicted class membership.&lt;/p&gt;
&lt;p&gt;To start, we should prepare the R environment by loading a few packages we will use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nnet&lt;/code&gt; to estimate the multinomial logistic model;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MLmetric&lt;/code&gt; to check someone else’s implementation of the cross-entropy computation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FactoMineR&lt;/code&gt; to create a &lt;a href=&#34;https://www.xlstat.com/en/solutions/features/complete-disjuncive-tables-creating-dummy-variables&#34;&gt;disjunctive table&lt;/a&gt; from an R factor&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Prepare environment ----------------------------------------------------------

# Packages
library(nnet)
library(MLmetrics)  # for LogLoss() function
library(FactoMineR) # for tab.disjonctif() function

# Default rounding for this sessino
options(&amp;quot;digits&amp;quot; = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we should estimate the multinomial logistic model of interest.
We will use this model to create predictions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fit mulinomial logistic model ------------------------------------------------

# Fit model
glm_mln &amp;lt;- multinom(Species ~ Sepal.Length, data = iris)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create two R matrices &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;p_hat&lt;/code&gt; storing all the scalars &lt;span class=&#34;math inline&#34;&gt;\(p_{ik}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\hat{p}_{ik}\)&lt;/span&gt; we need to compute &lt;a href=&#34;#eq:CE&#34;&gt;(1)&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we want to store all the &lt;span class=&#34;math inline&#34;&gt;\(p_{ik}\)&lt;/span&gt; in one matrix.
To do so, we can create a disjunctive table based on the &lt;code&gt;species&lt;/code&gt; factor.
This is an &lt;span class=&#34;math inline&#34;&gt;\(N \times K\)&lt;/span&gt; matrix storing 0s and 1s to indicate which class every observation belongs to.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Obtain p and p_har -----------------------------------------------------------

# store true labels in a matrix p
p &amp;lt;- FactoMineR::tab.disjonctif(iris$Species)

# check it
head(p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   setosa versicolor virginica
## 1      1          0         0
## 2      1          0         0
## 3      1          0         0
## 4      1          0         0
## 5      1          0         0
## 6      1          0         0&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second, we want to obtain the predicted class probabilities for every observation:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# obtain predictions
p_hat &amp;lt;- predict(glm_mln, type = &amp;quot;probs&amp;quot;)

# check it
head(p_hat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    setosa versicolor virginica
## 1 0.80657   0.176155 0.0172792
## 2 0.91844   0.076558 0.0050018
## 3 0.96787   0.030792 0.0013399
## 4 0.98005   0.019262 0.0006841
## 5 0.87281   0.117765 0.0094276
## 6 0.47769   0.442466 0.0798435&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can now write a loop to perform the computation in &lt;a href=&#34;#eq:CE&#34;&gt;(1)&lt;/a&gt; for every &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute CE with a loop -------------------------------------------------------

# Define parameters
N &amp;lt;- nrow(iris) # sample size
K &amp;lt;- nlevels(iris$Species) # number of classes

# Create storing object for CE
CE &amp;lt;- 0

# Compute CE with a loop
for (i in 1:N){
  for (k in 1:K){
    CE &amp;lt;- CE - p[i, k] * log(p_hat[i, k])
  }
}

# Print the value of CE
CE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 91.034&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also work with the matrices &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;p_hat&lt;/code&gt; directly to avoid using a loop:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute CE using the matrices directly ---------------------------------------
ce &amp;lt;- -sum(diag(p %*% t(log(p_hat))))

# Print the value of ce
ce&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 91.034&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach works for a binary prediction just as well.
We only need to pay attention to storing the true and predicted probabilities in matrix form.
For example, consider the task of predicting the transmission type (automatic or not) for the cars recorded in the &lt;code&gt;mtcars&lt;/code&gt; dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Binary cross entropy ---------------------------------------------------------

# Fit model
glm_log &amp;lt;- glm(am ~ hp + wt,
               family = binomial(link = &amp;#39;logit&amp;#39;),
               data = mtcars)

# store true labels in a matrix p
p &amp;lt;- FactoMineR::tab.disjonctif(mtcars$am)

# obtain predicted probabilites in matrix form
pred_probs &amp;lt;- predict(glm_log, type = &amp;quot;response&amp;quot;)
p_hat &amp;lt;- cbind(k_0 = 1 - pred_probs,
               k_1 = pred_probs)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The objects &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;p_hat&lt;/code&gt; are all the information we need to compute the cross-entropy for this binary prediction task:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# check the first few rows of p
head(p)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [,1] [,2]
## 1    0    1
## 2    0    1
## 3    0    1
## 4    1    0
## 5    1    0
## 6    1    0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# check the first few rows of p_hat
head(p_hat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                        k_0       k_1
## Mazda RX4         0.157664 0.8423355
## Mazda RX4 Wag     0.595217 0.4047825
## Datsun 710        0.029759 0.9702408
## Hornet 4 Drive    0.958272 0.0417280
## Hornet Sportabout 0.930612 0.0693881
## Valiant           0.995012 0.0049882&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use these new objects to obtain the binary CE with the same computation we used for the multiclass CE:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute CE using the matrices directly
ce &amp;lt;- -sum(diag(p %*% t(log(p_hat))))

# Print the value of ce
ce&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5.0296&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not uncommon to divide the value of the cross-entropy by the number of units on which the computation is performed, effectively producing an average loss across the units.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Express as average
ce / nrow(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.15717&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just to be sure, we can use the &lt;code&gt;LogLoss()&lt;/code&gt; function from the &lt;code&gt;MLmetrics&lt;/code&gt; package to compute the same binary CE.
However, this function requires the true and predicted probabilities to be stored as vectors instead of matrices.
So first we need to obtain the vector versions of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;p_hat&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute binary CE with MLmetrics implementation ------------------------------

# Obtain vector of true probabilities
p_vec &amp;lt;- mtcars$am

# Obtain vector of predicted probabilities
p_hat_vec &amp;lt;- predict(glm_log, type = &amp;quot;response&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then we can simply provide these objects to the &lt;code&gt;LogLoss()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute and print binary CE with MLmetrics implementation
MLmetrics::LogLoss(y_pred = p_hat_vec,
                   y_true = p_vec)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.15717&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr-just-give-me-the-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;TL;DR, just give me the code!&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Prepare environment ----------------------------------------------------------

# Packages
library(nnet)
library(MLmetrics)  # for LogLoss() function
library(FactoMineR) # for tab.disjonctif() function

# Default rounding for this sessino
options(&amp;quot;digits&amp;quot; = 5)

# Fit mulinomial logistic model ------------------------------------------------

# Fit model
glm_mln &amp;lt;- multinom(Species ~ Sepal.Length, data = iris)

# Obtain p and p_har -----------------------------------------------------------

# store true labels in a matrix p
p &amp;lt;- FactoMineR::tab.disjonctif(iris$Species)

# check it
head(p)

# obtain predictions
p_hat &amp;lt;- predict(glm_mln, type = &amp;quot;probs&amp;quot;)

# check it
head(p_hat)

# Compute CE with a loop -------------------------------------------------------

# Define parameters
N &amp;lt;- nrow(iris) # sample size
K &amp;lt;- nlevels(iris$Species) # number of classes

# Create storing object for CE
CE &amp;lt;- 0

# Compute CE with a loop
for (i in 1:N){
  for (k in 1:K){
    CE &amp;lt;- CE - p[i, k] * log(p_hat[i, k])
  }
}

# Print the value of CE
CE

# Compute CE using the matrices directly ---------------------------------------
ce &amp;lt;- -sum(diag(p %*% t(log(p_hat))))

# Print the value of ce
ce

# Binary cross entropy ---------------------------------------------------------

# Fit model
glm_log &amp;lt;- glm(am ~ hp + wt,
               family = binomial(link = &amp;#39;logit&amp;#39;),
               data = mtcars)

# store true labels in a matrix p
p &amp;lt;- FactoMineR::tab.disjonctif(mtcars$am)

# obtain predicted probabilites in matrix form
pred_probs &amp;lt;- predict(glm_log, type = &amp;quot;response&amp;quot;)
p_hat &amp;lt;- cbind(k_0 = 1 - pred_probs,
               k_1 = pred_probs)

# check the first few rows of p
head(p)

# check the first few rows of p_hat
head(p_hat)

# Compute CE using the matrices directly
ce &amp;lt;- -sum(diag(p %*% t(log(p_hat))))

# Print the value of ce
ce

# Express as average
ce / nrow(mtcars)

# Compute binary CE with MLmetrics implementation ------------------------------

# Obtain vector of true probabilities
p_vec &amp;lt;- mtcars$am

# Obtain vector of predicted probabilities
p_hat_vec &amp;lt;- predict(glm_log, type = &amp;quot;response&amp;quot;)

# Compute and print binary CE with MLmetrics implementation
MLmetrics::LogLoss(y_pred = p_hat_vec,
                   y_true = p_vec)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;other-resources&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rpubs.com/juanhklopper/cross_entropy&#34;&gt;Cross-entropy in RPubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://machinelearningmastery.com/cross-entropy-for-machine-learning/&#34;&gt;A Gentle Introduction to Cross-Entropy for Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gombru.github.io/2018/05/23/cross_entropy_loss/&#34;&gt;Understanding Categorical Cross-Entropy Loss, Binary Cross-Entropy Loss, Softmax Loss, Logistic Loss, Focal Loss and all those confusing names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ml-cheatsheet.readthedocs.io/en/latest/loss_functions.html&#34;&gt;ML Gloassary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/cross-entropy-loss-in-pytorch-c010faf97bab&#34;&gt;Loss Functions in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
