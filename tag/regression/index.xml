<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>regression | Edo</title>
    <link>https://symphonious-crostata-aa195e.netlify.app/tag/regression/</link>
      <atom:link href="https://symphonious-crostata-aa195e.netlify.app/tag/regression/index.xml" rel="self" type="application/rss+xml" />
    <description>regression</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 28 Feb 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://symphonious-crostata-aa195e.netlify.app/media/icon_hud9fa8ac6cd4a8ee42e0d32197c4c8f6f_199053_512x512_fill_lanczos_center_3.png</url>
      <title>regression</title>
      <link>https://symphonious-crostata-aa195e.netlify.app/tag/regression/</link>
    </image>
    
    <item>
      <title>Estimating ridge regression in R</title>
      <link>https://symphonious-crostata-aa195e.netlify.app/post/ridge/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://symphonious-crostata-aa195e.netlify.app/post/ridge/</guid>
      <description>
&lt;script src=&#34;https://symphonious-crostata-aa195e.netlify.app/post/ridge/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learn-by-coding&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Learn by coding&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fitting-ridge-regression-manually&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Fitting ridge regression manually&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#an-alternative-way-to-avoid-penalising-the-intercept&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1.1&lt;/span&gt; An alternative way to avoid penalising the intercept&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fit-ridge-regression-with-glmnet&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Fit ridge regression with glmnet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#use-the-biased-estimation-of-variance&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; Use the biased estimation of variance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#return-the-unstandardized-coefficients&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.2&lt;/span&gt; Return the unstandardized coefficients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adjust-the-parametrization-of-lambda-for-glmnet&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.3&lt;/span&gt; Adjust the parametrization of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; for &lt;code&gt;glmnet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compare-manual-and-glmnet-ridge-regression-output&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.4&lt;/span&gt; Compare manual and &lt;code&gt;glmnet&lt;/code&gt; ridge regression output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tldr-just-give-me-the-code&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; TL;DR, just give me the code!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;When there are many correlated predictors in a linear regression model, their regression coefficients can become poorly determined and exhibit high variance.
This problem can be alleviated by imposing a size constraint (or penalty) on the coefficients.
Ridge regression shrinks the regression coefficients by imposing a penalty on their size.
The ridge coefficients values minimize a penalized residual sum of squares:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta}^{\text{ridge}} = \text{argmin}_{\beta} \left\{ \sum_{i=1}^{N} \left( y_i - \beta_0 - \sum_{j=1}^{p} x_{ij}\beta_j \right)^2 + \lambda \sum_{j=1}^{p}\beta_j^2 \right\}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The ridge solutions are not equivariant under scaling of the inputs.
Therefore, it is recommended to standardize the inputs before solving the minimization problem.&lt;/p&gt;
&lt;p&gt;Notice that the intercept &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; has been left out of the penalty term.
Penalization of the intercept would make the procedure depend on the origin chosen for &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;.
Furthermore, by centering the predictors, we can separate the solution to the &lt;a href=&#34;https://www.notion.so/Ridge-regression-8134d8babda5413ab182df645c6196a8&#34;&gt;minimazion problem&lt;/a&gt; into two parts:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Intercept
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta}_0 = \bar{y}=\frac{1}{N}\sum_{i = 1}^{N} y_i
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Penalised regression coefficients
&lt;span class=&#34;math display&#34;&gt;\[
\hat{\beta}^{\text{ridge}}=(\mathbf{X}^T\mathbf{X} + \lambda \mathbf{I})^{-1}\mathbf{X}^Ty
\]&lt;/span&gt;
which is the regular way of estimating regression coefficients with a penalty term (&lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;) added on the diagonal (&lt;span class=&#34;math inline&#34;&gt;\(\mathbf{I}\)&lt;/span&gt;) of the cross-product matrix (&lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^T\mathbf{X}\)&lt;/span&gt;) to make it invertible (&lt;span class=&#34;math inline&#34;&gt;\((...)^{-1}\)&lt;/span&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-by-coding&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Learn by coding&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;glmnet&lt;/code&gt; package can be used to obtain the ridge regression estimates of the regression coefficients.
In this section, we will first see how to obtain these estimates “manually”, that is coding every step on our own, and then we will see how to obtain the same results using the &lt;code&gt;glmnet&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Let’s start by setting up the R environment.
In this post, we will work with the &lt;code&gt;mtcars&lt;/code&gt; data.
If you are not familiar with it, just look up the R help file on it.
We will use the first column of the dataset (variable named &lt;code&gt;mpg&lt;/code&gt;) as a dependent variable and the remaining ones as predictors in a linear regression.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set up -----------------------------------------------------------------------

# Load packages
library(glmnet)

# Take the mtcars data
y &amp;lt;- mtcars[, &amp;quot;mpg&amp;quot;]
X &amp;lt;- mtcars[, -1]

# Create a few shorthands we will use
n &amp;lt;- nrow(X)
p &amp;lt;- ncol(X)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;fitting-ridge-regression-manually&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Fitting ridge regression manually&lt;/h2&gt;
&lt;p&gt;First, let’s make sure the predictors are centered on the mean and scaled to have a variance of 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fitting ridge regression manually --------------------------------------------

# Scale the data (standardize)
X_scale &amp;lt;- scale(X, center = TRUE, scale = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we want to &lt;strong&gt;fit the ridge regression&lt;/strong&gt; manually by separating the intercept and the regression coefficients estimation (two-step approach):&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Estimate the intercept (&lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Estimate the intercept
b0_hat_r &amp;lt;- mean(y)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Estimate the ridge regression coefficients (&lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}^{\text{ridge}}\)&lt;/span&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;p&gt;Compute the cross-product matrix of the predictors.&lt;/p&gt;
&lt;p&gt;This is the same step we would take if we wanted to compute the OLS estimates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute the cross-product matrix of the data
XtX &amp;lt;- t(X_scale) %*% X_scale&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define a value of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This value is usually chosen by cross-validation from a grid of possible values.
However, here we are only interested in how &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is used in the computation, so we can simply give it a fixed value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Define a lambda value
lambda &amp;lt;- .1&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compute &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}^{\text{ridge}}\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Estimate the regression coefficients with the ridge penalty
bs_hat_r &amp;lt;- solve(XtX + lambda * diag(p)) %*% t(X_scale) %*% y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;diag(p)&lt;/code&gt; is the identity matrix &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{I}\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, let’s print the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r)),
  3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     twostep
## b0   20.091
## b1   -0.194
## b2    1.366
## b3   -1.373
## b4    0.438
## b5   -3.389
## b6    1.361
## b7    0.162
## b8    1.243
## b9    0.496
## b10  -0.460&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note the effect of centering and scaling.
When fitting ridge regression, many sources recommend centering the data.
This allows to separate the estimation of the intercept from the estimation of the regression coefficients.
As a result, only the regression coefficients are penalised.
To understand the effect of centering, consider what happens in regular OLS estimation when &lt;strong&gt;predictors are centered&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Centering in regular OLS -----------------------------------------------------

# Create a version of X that is centered
X_center &amp;lt;- scale(X, center = TRUE, scale = FALSE)

# Fit an regular linear model
lm_ols &amp;lt;- lm(y ~ X_center)

# Check that b0 is equal to the mean of y
coef(lm_ols)[&amp;quot;(Intercept)&amp;quot;] - mean(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   (Intercept) 
## -3.552714e-15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, let’s see what would have happened if we had penalised the intercept as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Consequence of penalising the intercept --------------------------------------

# Add a vector of 1s to penalise the intercept
X_scale_w1 &amp;lt;- cbind(1, X_scale)

# Compute the cross-product matrix of the data
XtX &amp;lt;- t(X_scale_w1) %*% X_scale_w1

# Estimate the regression coefficients with the ridge penalty
bs_hat_r_w1 &amp;lt;- solve(XtX + lambda * diag(p+1)) %*% t(X_scale_w1) %*% y

# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r),
             onestep = c(b0 = bs_hat_r_w1[1],
                         b = bs_hat_r_w1[-1])),
  3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     twostep onestep
## b0   20.091  20.028
## b1   -0.194  -0.194
## b2    1.366   1.366
## b3   -1.373  -1.373
## b4    0.438   0.438
## b5   -3.389  -3.389
## b6    1.361   1.361
## b7    0.162   0.162
## b8    1.243   1.243
## b9    0.496   0.496
## b10  -0.460  -0.460&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you see, the intercept would be shrunk toward zero, without any benefit.
As a result, any prediction would also be offset by the same amount.&lt;/p&gt;
&lt;div id=&#34;an-alternative-way-to-avoid-penalising-the-intercept&#34; class=&#34;section level3&#34; number=&#34;2.1.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1.1&lt;/span&gt; An alternative way to avoid penalising the intercept&lt;/h3&gt;
&lt;p&gt;It can be handy to obtain estimates of the regression coefficients and intercept in one step.
We can use matrix algebra and R to simplify the two-step procedure to a single step.
In particular, we can avoid the penalisation of the intercept by setting to 0 the first element of the “penalty” matrix &lt;code&gt;lambda * diag(p + 1)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Alternative to avoid penalization of the intercept ---------------------------

# Compute cross-product matrix
XtX &amp;lt;- crossprod(X_scale_w1)

# Create penalty matrix
pen &amp;lt;- lambda * diag(p + 1)

# replace first element with 0
pen[1, 1] &amp;lt;- 0

# Obtain standardized estimates
bs_hat_r2 &amp;lt;- solve(XtX + pen) %*% t(X_scale_w1) %*% (y)

# Compare
round(
        data.frame(
                twostep = c(b0 = b0_hat_r, b = bs_hat_r),
                onestep = c(b0 = bs_hat_r2[1], b = bs_hat_r2[-1])
        ),
        3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     twostep onestep
## b0   20.091  20.091
## b1   -0.194  -0.194
## b2    1.366   1.366
## b3   -1.373  -1.373
## b4    0.438   0.438
## b5   -3.389  -3.389
## b6    1.361   1.361
## b7    0.162   0.162
## b8    1.243   1.243
## b9    0.496   0.496
## b10  -0.460  -0.460&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;fit-ridge-regression-with-glmnet&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Fit ridge regression with glmnet&lt;/h2&gt;
&lt;p&gt;The most popular R package to fit regularised regression is &lt;code&gt;glmnet&lt;/code&gt;.
Let’s see how we can replicate the results we obtained with the manual approach with glmnet.
There are three important differences to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glmnet&lt;/code&gt; uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Variance#Biased_sample_variance&#34;&gt;biased sample variance estimate&lt;/a&gt; when scaling the predictors;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glmnet&lt;/code&gt; returns the unstandardized regression coefficients;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glmnet&lt;/code&gt; uses a different parametrization for &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To obtain the same results with the manual approach and &lt;code&gt;glmnet&lt;/code&gt; we need to account for these.&lt;/p&gt;
&lt;div id=&#34;use-the-biased-estimation-of-variance&#34; class=&#34;section level3&#34; number=&#34;2.2.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; Use the biased estimation of variance&lt;/h3&gt;
&lt;p&gt;First, let’s use the biased sample variance estimate in computing &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}^{\text{ridge}}\)&lt;/span&gt; with the manual approach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fitting ridge manually with biased variance estimation -----------------------

# Standardize X
X_scale &amp;lt;- sapply(1:p, function (j){
  muj &amp;lt;- mean(X[, j])                  # mean
  sj &amp;lt;- sqrt( var(X[, j]) * (n-1) / n) # (biased) sd
  (X[, j] - muj) / sj                  # center and scale
})

# Craete the desing matrix
X_scale_dm &amp;lt;- cbind(1, X_scale)

# Compute cross-product matrix
XtX &amp;lt;- crossprod(X_scale_dm)

# Create penalty matrix
pen &amp;lt;- lambda * diag(p + 1)
pen[1, 1] &amp;lt;- 0

# Obtain standardized estimates
bs_hat_r3 &amp;lt;- solve(XtX + pen) %*% t(X_scale_dm) %*% (y)

# Print results
round(
      data.frame(
              manual = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1])
      ),
      3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     manual
## b0  20.091
## b1  -0.191
## b2   1.353
## b3  -1.354
## b4   0.430
## b5  -3.343
## b6   1.343
## b7   0.159
## b8   1.224
## b9   0.488
## b10 -0.449&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;return-the-unstandardized-coefficients&#34; class=&#34;section level3&#34; number=&#34;2.2.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.2&lt;/span&gt; Return the unstandardized coefficients&lt;/h3&gt;
&lt;p&gt;Next, we need to revert these regression coefficients to their original scale.
Since we are estimating the regression coefficients on the scaled data, they are computed on the standardized scale.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Return the  unstandardized coefficients --------------------------------------

# Extract the original mean and standard deviations of all X variables
mean_x &amp;lt;- colMeans(X)
sd_x &amp;lt;- sqrt(apply(X, 2, var) * (n - 1) / n) # biased version

# Revert to original scale
bs_hat_r4 &amp;lt;- c(bs_hat_r3[1] - crossprod(mean_x, bs_hat_r3[-1] / sd_x),
               bs_hat_r3[-1] / sd_x)

# Compare manual standardized and unstandardized results
round(
      data.frame(
              standardized = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1]),
              unstandardized = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1])
      ),
      3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     standardized unstandardized
## b0        20.091         12.908
## b1        -0.191         -0.109
## b2         1.353          0.011
## b3        -1.354         -0.020
## b4         0.430          0.818
## b5        -3.343         -3.471
## b6         1.343          0.764
## b7         0.159          0.320
## b8         1.224          2.491
## b9         0.488          0.672
## b10       -0.449         -0.282&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adjust-the-parametrization-of-lambda-for-glmnet&#34; class=&#34;section level3&#34; number=&#34;2.2.3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.3&lt;/span&gt; Adjust the parametrization of &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; for &lt;code&gt;glmnet&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Next, we need to understand the relationship between the &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; parametrization we used and the one used by &lt;code&gt;glmnet&lt;/code&gt;.
The following code shows that if we want to use a given value of &lt;code&gt;lambda&lt;/code&gt; in &lt;code&gt;glmnet&lt;/code&gt; we need to multiply it by the standard deviation of the dependent variable (&lt;code&gt;sd_y&lt;/code&gt;) and divide it by the sample size (&lt;code&gt;n&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Adjust the parametrization of lambda -----------------------------------------

# Extract the original mean and standard deviations of y (for lambda parametrization)
mean_y &amp;lt;- mean(y)
sd_y &amp;lt;- sqrt(var(y) * (n - 1) / n)

# Compute the value glmnet wants for your target lambda
lambda_glmnet &amp;lt;- sd_y * lambda / n&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;compare-manual-and-glmnet-ridge-regression-output&#34; class=&#34;section level3&#34; number=&#34;2.2.4&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4&lt;/span&gt; Compare manual and &lt;code&gt;glmnet&lt;/code&gt; ridge regression output&lt;/h3&gt;
&lt;p&gt;Finally, we can compare the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fitting ridge regression with glmnet -----------------------------------------

# Fit glmnet
fit_glmnet_s &amp;lt;- glmnet(x = X,
                       y = y,
                       alpha = 0,
                       lambda = lambda_glmnet, # correction for how penalty is used
                       thresh = 1e-20)

bs_glmnet &amp;lt;- coef(fit_glmnet_s)

# Compare estimated coefficients
round(
      data.frame(
        manual = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1]),
        glmnet = c(b0 = bs_glmnet[1], b = bs_glmnet[-1])
      ),
      3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        manual glmnet
## b0     12.908 12.908
## b.cyl  -0.109 -0.109
## b.disp  0.011  0.011
## b.hp   -0.020 -0.020
## b.drat  0.818  0.818
## b.wt   -3.471 -3.471
## b.qsec  0.764  0.764
## b.vs    0.320  0.320
## b.am    2.491  2.491
## b.gear  0.672  0.672
## b.carb -0.282 -0.282&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr-just-give-me-the-code&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; TL;DR, just give me the code!&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set up -----------------------------------------------------------------------

# Load packages
library(glmnet)

# Take the mtcars data
y &amp;lt;- mtcars[, &amp;quot;mpg&amp;quot;]
X &amp;lt;- mtcars[, -1]

# Create a few shorthands we will use
n &amp;lt;- nrow(X)
p &amp;lt;- ncol(X)

# Fitting ridge regression manually --------------------------------------------

# Scale the data (standardize)
X_scale &amp;lt;- scale(X, center = TRUE, scale = TRUE)

# Estimate the intercept
b0_hat_r &amp;lt;- mean(y)


# Compute the cross-product matrix of the data
XtX &amp;lt;- t(X_scale) %*% X_scale

# Define a lambda value
lambda &amp;lt;- .1

# Estimate the regression coefficients with the ridge penalty
bs_hat_r &amp;lt;- solve(XtX + lambda * diag(p)) %*% t(X_scale) %*% y

# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r)),
  3
)

# Centering in regular OLS -----------------------------------------------------

# Create a version of X that is centered
X_center &amp;lt;- scale(X, center = TRUE, scale = FALSE)

# Fit an regular linear model
lm_ols &amp;lt;- lm(y ~ X_center)

# Check that b0 is equal to the mean of y
coef(lm_ols)[&amp;quot;(Intercept)&amp;quot;] - mean(y)

# Consequence of penalising the intercept --------------------------------------

# Add a vector of 1s to penalise the intercept
X_scale_w1 &amp;lt;- cbind(1, X_scale)

# Compute the cross-product matrix of the data
XtX &amp;lt;- t(X_scale_w1) %*% X_scale_w1

# Estimate the regression coefficients with the ridge penalty
bs_hat_r_w1 &amp;lt;- solve(XtX + lambda * diag(p+1)) %*% t(X_scale_w1) %*% y

# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r),
             onestep = c(b0 = bs_hat_r_w1[1],
                         b = bs_hat_r_w1[-1])),
  3
)

# Alternative to avoid penalization of the intercept ---------------------------

# Compute cross-product matrix
XtX &amp;lt;- crossprod(X_scale_w1)

# Create penalty matrix
pen &amp;lt;- lambda * diag(p + 1)

# replace first element with 0
pen[1, 1] &amp;lt;- 0

# Obtain standardized estimates
bs_hat_r2 &amp;lt;- solve(XtX + pen) %*% t(X_scale_w1) %*% (y)

# Compare
round(
        data.frame(
                twostep = c(b0 = b0_hat_r, b = bs_hat_r),
                onestep = c(b0 = bs_hat_r2[1], b = bs_hat_r2[-1])
        ),
        3
)

# Fitting ridge manually with biased variance estimation -----------------------

# Standardize X
X_scale &amp;lt;- sapply(1:p, function (j){
  muj &amp;lt;- mean(X[, j])                  # mean
  sj &amp;lt;- sqrt( var(X[, j]) * (n-1) / n) # (biased) sd
  (X[, j] - muj) / sj                  # center and scale
})

# Craete the desing matrix
X_scale_dm &amp;lt;- cbind(1, X_scale)

# Compute cross-product matrix
XtX &amp;lt;- crossprod(X_scale_dm)

# Create penalty matrix
pen &amp;lt;- lambda * diag(p + 1)
pen[1, 1] &amp;lt;- 0

# Obtain standardized estimates
bs_hat_r3 &amp;lt;- solve(XtX + pen) %*% t(X_scale_dm) %*% (y)

# Print results
round(
      data.frame(
              manual = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1])
      ),
      3
)

# Return the  unstandardized coefficients --------------------------------------

# Extract the original mean and standard deviations of all X variables
mean_x &amp;lt;- colMeans(X)
sd_x &amp;lt;- sqrt(apply(X, 2, var) * (n - 1) / n) # biased version

# Revert to original scale
bs_hat_r4 &amp;lt;- c(bs_hat_r3[1] - crossprod(mean_x, bs_hat_r3[-1] / sd_x),
               bs_hat_r3[-1] / sd_x)

# Compare manual standardized and unstandardized results
round(
      data.frame(
              standardized = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1]),
              unstandardized = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1])
      ),
      3
)

# Adjust the parametrization of lambda -----------------------------------------

# Extract the original mean and standard deviations of y (for lambda parametrization)
mean_y &amp;lt;- mean(y)
sd_y &amp;lt;- sqrt(var(y) * (n - 1) / n)

# Compute the value glmnet wants for your target lambda
lambda_glmnet &amp;lt;- sd_y * lambda / n

# Fitting ridge regression with glmnet -----------------------------------------

# Fit glmnet
fit_glmnet_s &amp;lt;- glmnet(x = X,
                       y = y,
                       alpha = 0,
                       lambda = lambda_glmnet, # correction for how penalty is used
                       thresh = 1e-20)

bs_glmnet &amp;lt;- coef(fit_glmnet_s)

# Compare estimated coefficients
round(
      data.frame(
        manual = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1]),
        glmnet = c(b0 = bs_glmnet[1], b = bs_glmnet[-1])
      ),
      3
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The sweep operator</title>
      <link>https://symphonious-crostata-aa195e.netlify.app/post/sweep/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://symphonious-crostata-aa195e.netlify.app/post/sweep/</guid>
      <description>
&lt;script src=&#34;https://symphonious-crostata-aa195e.netlify.app/post/sweep/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#learn-by-coding&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Learn by coding&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#coding-a-sweep-function-in-r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Coding a sweep function in R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-sweep-operator-to-estimate-regression-models&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Using the sweep operator to estimate regression models&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#compute-the-augmented-covariance-matrix&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; Compute the augmented covariance matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#estimate-multivariate-linear-models&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.2&lt;/span&gt; Estimate multivariate linear models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tldr-just-give-me-the-code&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; TL;DR, just give me the code!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34; number=&#34;1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;The sweep operator is a matrix transformation commonly used to estimate regression models.
It performs elementary row operations on a &lt;span class=&#34;math inline&#34;&gt;\(p \times p\)&lt;/span&gt; matrix which happen to be particularly useful to estimate multivariate linear models.
Little and Rubin &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-littleRubin:2002&#34; role=&#34;doc-biblioref&#34;&gt;2002, p148&lt;/a&gt;)&lt;/span&gt; defined it as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sweep operator is defined for symmetric matrices as follows. A &lt;span class=&#34;math inline&#34;&gt;\(p \times p\)&lt;/span&gt; symmetric matrix G is said to be swept on row and column k if it is replaced by another symmetric &lt;span class=&#34;math inline&#34;&gt;\(p \times p\)&lt;/span&gt; matrix H with elements defined as follows:
&lt;span class=&#34;math display&#34;&gt;\[
h_{kk} = -1/g_{kk}
\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[
h_{jk} = h_{kj} = \frac{g_{jk}}{g_{kk}}, j \neq k
\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[
h_{jl} = g_{jl} - \frac{g_{jk}g_{kl}}{g_{kk}}, j \neq k, l \neq k
\]&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The notation indicating this transformation is usually a variation of (k)[G]$, which can be read as sweeping matrix &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; on row and column &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;.
The notation (1, 2, …, K)[G]$ indicates successive applications of &lt;span class=&#34;math inline&#34;&gt;\(\text{SWEEP}(k)[G]\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(k = 1, \dots, K\)&lt;/span&gt;.
Sweeps on multiple positions do not need to be carried out in any particular order.
The sweep operator is commutative.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{SWEEP}(k_2)[\text{SWEEP}(k_1)[G]] = \text{SWEEP}(k_1)[\text{SWEEP}(k_2)[G]]
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this post, I’m interested in exploring how we use the sweep operator to estimate the parameters of regressions models.
If you are interested in the mathematical details, I recommend reading the full sweep operator description in one of the following resources: Goodnight &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-goodnight:1979&#34; role=&#34;doc-biblioref&#34;&gt;1979, p154&lt;/a&gt;)&lt;/span&gt;, Schafer &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-schafer:1997&#34; role=&#34;doc-biblioref&#34;&gt;1997&lt;/a&gt;)&lt;/span&gt;, Little and Rubin &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-littleRubin:2002&#34; role=&#34;doc-biblioref&#34;&gt;2002, p148&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Goodnight &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-goodnight:1979&#34; role=&#34;doc-biblioref&#34;&gt;1979, p150&lt;/a&gt;)&lt;/span&gt; is a particularly helpful paper as it describes an easy to implement algorithm to perform the sweep operator.
Following Goodnight, given an originally symmetric positive definite matrix G, &lt;span class=&#34;math inline&#34;&gt;\(\text{SWEEP}(k)[G]\)&lt;/span&gt; modifies a matrix G as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Let &lt;span class=&#34;math inline&#34;&gt;\(D = g_{kk}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Step 2: Divide row &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; by &lt;span class=&#34;math inline&#34;&gt;\(D\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Step 3: For every other row &lt;span class=&#34;math inline&#34;&gt;\(i \neq k\)&lt;/span&gt;, let &lt;span class=&#34;math inline&#34;&gt;\(B = g_{ik}\)&lt;/span&gt;. Subtract &lt;span class=&#34;math inline&#34;&gt;\(B \times \text{row } k\)&lt;/span&gt; from row &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;. Set &lt;span class=&#34;math inline&#34;&gt;\(g_{ik} = -B/D\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Step 4: Set &lt;span class=&#34;math inline&#34;&gt;\(g_{kk} = 1/D\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-by-coding&#34; class=&#34;section level1&#34; number=&#34;2&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Learn by coding&lt;/h1&gt;
&lt;div id=&#34;coding-a-sweep-function-in-r&#34; class=&#34;section level2&#34; number=&#34;2.1&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Coding a sweep function in R&lt;/h2&gt;
&lt;p&gt;Let’s start by coding a simple function that performs the operations described by Goodnight &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-goodnight:1979&#34; role=&#34;doc-biblioref&#34;&gt;1979, p150&lt;/a&gt;)&lt;/span&gt;.
We want a function that takes as inputs a symmetric matrix (argument &lt;code&gt;G&lt;/code&gt;) and a vector of positions to sweep over (argument &lt;code&gt;K&lt;/code&gt;).
The function below takes these two inputs and performs the four sweep steps for every element of &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Write an R function implementing SWEEP(k)[G] according to Goodnight ----------

sweepGoodnight &amp;lt;- function (G, K){

  for(k in K){
    # Step 1: Let D = g_kk
    D &amp;lt;- G[k, k]

    # Step 2: Divide row k by D.
    G[k, ] &amp;lt;- G[k, ] / D

    # Step 3:
    # - For every other row i != k, let B = g_ik
    # - Subtract B \times row k from row i.
    # - set g_ik = -B/D.
    for(i in 1:nrow(G)){
      if(i != k){
        B &amp;lt;- G[i, k]
        G[i, ] &amp;lt;- G[i, ] - B * G[k, ]
        G[i, k] &amp;lt;- -1 * B / D
      }
    }
    # Step 4: Set g_kk = 1/D
    G[k, k] = 1/D
  }

  # Output
  return(G)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check that this function returns what we want by comparing it with a function implemented by someone else.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compare sweepGoodnight with other implementations ----------------------------

# Install the `fastmatrix` package (run if you don&amp;#39;t have it yet)
# install.packages(&amp;quot;fastmatrix&amp;quot;)

# Load fastmatrix
library(fastmatrix)

# Define an example dataset
X &amp;lt;- matrix(c(1, 1, 1, 1,
              1, 2, 1, 3,
              1, 3, 1, 3,
              1, 1,-1, 2,
              1, 2,-1, 2,
              1, 3,-1, 1), ncol = 4, byrow = TRUE)

# Define the G matrix
G &amp;lt;- crossprod(X)

# Define a vector of positions to sweep over
K &amp;lt;- 1:3

# Perform SWEEP[K](G) with fastmatrix sweep.operator
H_fm &amp;lt;- sweep.operator(G, k = K)

# Perform SWEEP[K](G) with our sweepGoodnight implementation
H_sg &amp;lt;- sweepGoodnight(G, K = K)

# Compare the two
all.equal(H_fm, H_sg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The functions &lt;code&gt;fastmatrix::sweep.operator()&lt;/code&gt; and &lt;code&gt;sweepGoodnight()&lt;/code&gt; return the same &lt;code&gt;H&lt;/code&gt; matrix by sweeping matrix &lt;code&gt;G&lt;/code&gt; over the positions defined in &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-sweep-operator-to-estimate-regression-models&#34; class=&#34;section level2&#34; number=&#34;2.2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Using the sweep operator to estimate regression models&lt;/h2&gt;
&lt;p&gt;To understand how the sweep operator relates to the estimation of multivariate linear models, we will work with a data set used by Little and Rubin &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-littleRubin:2002&#34; role=&#34;doc-biblioref&#34;&gt;2002, p152&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load Little Rubin data -------------------------------------------------------

# Create data
  X &amp;lt;- as.data.frame(
          matrix(
                  data = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10, 26,
                           29, 56, 31, 52, 55, 71 ,31, 54, 47, 40, 66, 68,
                           6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8,
                           60, 52, 20, 47, 33, 22,6,44,22,26,34,12,12,
                           78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7,
                           72.5, 93.1, 115.9, 83.8, 113.3, 109.4),
                  ncol = 5
          )
  )

# Store useful information
  n &amp;lt;- nrow(X)
  p &amp;lt;- ncol(X)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a quick look at the first rows of the data to get an idea of what we are working with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Glance at the first 6 rows of the data
  head(X)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1 V2 V3 V4    V5
## 1  7 26  6 60  78.5
## 2  1 29 15 52  74.3
## 3 11 56  8 20 104.3
## 4 11 31  8 47  87.6
## 5  7 52  6 33  95.9
## 6 11 55  9 22 109.2&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;compute-the-augmented-covariance-matrix&#34; class=&#34;section level3&#34; number=&#34;2.2.1&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; Compute the augmented covariance matrix&lt;/h3&gt;
&lt;p&gt;To obtain the estimates of the regression coefficients of a multivariate linear model, we need to sweep over the positions of the predictors the augmented covariance matrix of the data (&lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt;).
This is a &lt;span class=&#34;math inline&#34;&gt;\((p+1) \times (p+1)\)&lt;/span&gt; matrix storing the covariance matrix and the means of the dataset.
It usually looks like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\Theta =
\begin{bmatrix}
1 &amp;amp; \mu_1 &amp;amp; ... &amp;amp;\mu_p\\
\mu_1 &amp;amp; \sigma^2_1 &amp;amp; ... &amp;amp; \sigma_{1p}\\
... &amp;amp; ... &amp;amp; ... &amp;amp; ...\\
\mu_p &amp;amp; \sigma_{1p} &amp;amp; ... &amp;amp; \sigma^2_{p}
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with &lt;span class=&#34;math inline&#34;&gt;\(\mu_1, \dots, \mu_p\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\sigma^2_1, \dots, \sigma^2_p\)&lt;/span&gt;, and &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{jk}\)&lt;/span&gt; being the means, variances, and covariances of the variables in our dataset, respectively.&lt;/p&gt;
&lt;p&gt;In R, we can obtain this matrix in just a few steps starting from our dataset &lt;code&gt;X&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Augment the original data&lt;/strong&gt; with a column of 1s on the left.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;cbind()&lt;/code&gt; function to append a column of 1s to the left of X.
Keep in mind that we need to perform matrix operations with the resulting object.
Therefore, we need to make sure we are working with an R object of the class &lt;code&gt;matrix&lt;/code&gt; instead of &lt;code&gt;data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Obtain the augmented covariance matrix ---------------------------------------

# Augment X
  X_aug &amp;lt;- cbind(int = 1, as.matrix(X))

# Glance at the first 6 rows of X_aug
  head(X_aug)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      int V1 V2 V3 V4    V5
## [1,]   1  7 26  6 60  78.5
## [2,]   1  1 29 15 52  74.3
## [3,]   1 11 56  8 20 104.3
## [4,]   1 11 31  8 47  87.6
## [5,]   1  7 52  6 33  95.9
## [6,]   1 11 55  9 22 109.2&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compute the &lt;strong&gt;augmented matrix of &lt;a href=&#34;https://en.wikipedia.org/wiki/Sufficient_statistic&#34;&gt;sufficient statistics&lt;/a&gt; &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; is the matrix having as elements the sum of the cross-products of the columns of &lt;code&gt;X_aug&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
T =
\begin{bmatrix}
n &amp;amp; \sum{x_1} &amp;amp; ... &amp;amp; \sum{x_p}\\
\sum{x_1} &amp;amp; \sum{x_1^2} &amp;amp; ... &amp;amp; \sum{x_1 x_p}\\
... &amp;amp; ... &amp;amp; ... &amp;amp; ...\\
\sum{x_p} &amp;amp; \sum{x_1 x_p} &amp;amp; ... &amp;amp; \sum{x_p^2}
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since the first column of &lt;code&gt;X_aug&lt;/code&gt; is a column of 1s, the first element of T is the number of rows in the data, the first column and rows store the sum of scores on each variable (sufficient statistics for the mean), and the other elements store the sum of products between the columns of &lt;code&gt;X&lt;/code&gt; (sufficient statistics for the covariance matrix of &lt;code&gt;X&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In R, we can compute it easily with the cross-product function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute the matrix of sufficient statistics (T matrix)
  Tmat &amp;lt;- crossprod(X_aug)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transform T to G&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; is simply &lt;span class=&#34;math inline&#34;&gt;\(T / n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
G =
\begin{bmatrix}
 1 &amp;amp; \mu_1 &amp;amp; ... &amp;amp;\mu_p\\
 \mu_1 &amp;amp; \frac{\sum{x_1^2}}{n} &amp;amp; ... &amp;amp; \frac{\sum{x_1 x_p}}{n}\\
 ... &amp;amp; ... &amp;amp; ... &amp;amp; ...\\
 \mu_p &amp;amp; \frac{\sum{x_1 x_p}}{n} &amp;amp; ... &amp;amp; \frac{\sum{x_p^2}}{n}
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute G
  G &amp;lt;- Tmat / n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compute &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt;&lt;/strong&gt; by sweeping G over the first row and column.&lt;/p&gt;
&lt;p&gt;Let’s use our &lt;code&gt;sweepGoodnight()&lt;/code&gt; function to perform SWEEP(1)[G] and obtain &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\Theta =
\begin{bmatrix}
1 &amp;amp; \mu_1 &amp;amp; ... &amp;amp;\mu_p\\
\mu_1 &amp;amp; \sigma^2_1 &amp;amp; ... &amp;amp; \sigma_{1p}\\
... &amp;amp; ... &amp;amp; ... &amp;amp; ...\\
\mu_p &amp;amp; \sigma_{1p} &amp;amp; ... &amp;amp; \sigma^2_{p}
\end{bmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Sweep G over the first position
  Theta &amp;lt;- sweepGoodnight(G, 1)

# Check how it looks
  Theta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            int         V1         V2         V3          V4         V5
## int   1.000000   7.461538   48.15385  11.769231   30.000000   95.42308
## V1   -7.461538  31.940828   19.31361 -28.662722  -22.307692   59.68935
## V2  -48.153846  19.313609  223.51479 -12.810651 -233.923077  176.38107
## V3  -11.769231 -28.662722  -12.81065  37.869822    2.923077  -47.55621
## V4  -30.000000 -22.307692 -233.92308   2.923077  258.615385 -190.90000
## V5  -95.423077  59.689349  176.38107 -47.556213 -190.900000  208.90485&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Check Theta is storing the means in the first row and column
  colMeans(X)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        V1        V2        V3        V4        V5 
##  7.461538 48.153846 11.769231 30.000000 95.423077&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Check Theta is storing the ML covariance matrix everywhere else
  cov(X) * (n-1) / n&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           V1         V2         V3          V4         V5
## V1  31.94083   19.31361 -28.662722  -22.307692   59.68935
## V2  19.31361  223.51479 -12.810651 -233.923077  176.38107
## V3 -28.66272  -12.81065  37.869822    2.923077  -47.55621
## V4 -22.30769 -233.92308   2.923077  258.615385 -190.90000
## V5  59.68935  176.38107 -47.556213 -190.900000  208.90485&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pay attention to a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The covariance matrix stored in &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; is the Maximum Likelihood version (denominator should be &lt;code&gt;n&lt;/code&gt; instead of the default &lt;code&gt;n-1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;We could have constructed the object &lt;code&gt;Theta&lt;/code&gt; just by using &lt;code&gt;colMeans(X)&lt;/code&gt; and &lt;code&gt;cov(X) * (n-1) / n&lt;/code&gt; directly.
However, it is important to note the relationship between &lt;code&gt;Tmat&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;Theta&lt;/code&gt;.
In particular, pay attention to the fact that &lt;code&gt;Theta&lt;/code&gt; is the result of sweeping &lt;code&gt;G&lt;/code&gt; in the first position.
When I started looking into this topic I did not understand this, and I kept sweeping &lt;code&gt;Theta&lt;/code&gt; over the first position, resulting in a confusing double sweeping of the first column and row.
I will get back to this point in a sec.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;estimate-multivariate-linear-models&#34; class=&#34;section level3&#34; number=&#34;2.2.2&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.2&lt;/span&gt; Estimate multivariate linear models&lt;/h3&gt;
&lt;p&gt;Now let’s see how we can use &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; to estimate any multivariate linear model involving the variables in our dataset.
First, let’s see how we would obtain these linear models in R with standard procedures.
Say we want to regress V1 and V3 on V2, V4, and V5 from the &lt;code&gt;X&lt;/code&gt; dataset.
We will start by creating a formula for an &lt;code&gt;lm&lt;/code&gt; function to estimate the model we want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fit some multivariate linear models ------------------------------------------

  # Define the dependent variables (dvs) of the multivairate linear models
  dvs &amp;lt;- c(&amp;quot;V1&amp;quot;, &amp;quot;V3&amp;quot;)

  # Define the predictors (ivs) of the multivairate linear models
  ivs &amp;lt;- c(&amp;quot;V2&amp;quot;, &amp;quot;V4&amp;quot;, &amp;quot;V5&amp;quot;)

  # Create the formula (complicated but flexible way)
  formula_mlm &amp;lt;- paste0(&amp;quot;cbind(&amp;quot;,
                       paste0(dvs, collapse = &amp;quot;, &amp;quot;),
                       &amp;quot;) ~ &amp;quot;,
                       paste0(ivs, collapse = &amp;quot; + &amp;quot;))

  # Check the formula
  formula_mlm&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;cbind(V1, V3) ~ V2 + V4 + V5&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we will fit the multivariate linear model with the &lt;code&gt;lm()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Fit the model with the lm function
  mlm0 &amp;lt;- lm(formula_mlm, data = X)
  coef(mlm0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      V1          V3
## (Intercept) -45.7660931 135.1150663
## V2           -0.2747666  -0.6559719
## V4            0.1455375  -1.0485195
## V5            0.6507081  -0.6319507&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are our intercepts, and regression coefficients for the multivariate linear model.
We can sweep &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; over the positions of the independent variables to obtain the the same intercept and regression coefficients.
First, let’s define a vector of positions to sweep over based on the variable names we stored in &lt;code&gt;ivs&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Fit some multivariate linear models using sweep ------------------------------

  # Define positions to sweep over
  sweep_over &amp;lt;- which(colnames(Theta) %in% ivs)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, let’s simply sweep our &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; over these positions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Sweep theta
  H &amp;lt;- sweepGoodnight(Theta, K = sweep_over)

  # Check out the result
  H&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             int          V1           V2          V3           V4           V5
## int  612.422481 -45.7660931 -5.874822779 135.1150663 -6.469828251 -1.408803042
## V1    45.766093   1.6538239  0.274766592  -1.6628629 -0.145537538 -0.650708148
## V2    -5.874823  -0.2747666  0.085293622  -0.6559719  0.073716182 -0.004651691
## V3  -135.115066  -1.6628629  0.655971950   2.4781175  1.048519534  0.631950668
## V4    -6.469828   0.1455375  0.073716182  -1.0485195  0.075591156  0.006836668
## V5    -1.408803   0.6507081 -0.004651691  -0.6319507  0.006836668  0.014961788&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our regression coefficients are here in this new matrix.
We just need to find them.
We know that the dependent variables are V1 and V3, and that the independent variables are V2, V4, and V5.
Let’s index the rows of &lt;code&gt;H&lt;/code&gt; with the names of the ivs (and the name of the intercept row), and the columns of &lt;code&gt;H&lt;/code&gt; with the names of the dvs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Extract the regression coefficients from H
  H[c(&amp;quot;int&amp;quot;, ivs), dvs]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              V1          V3
## int -45.7660931 135.1150663
## V2   -0.2747666  -0.6559719
## V4    0.1455375  -1.0485195
## V5    0.6507081  -0.6319507&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Compare with coefficients from lm function
  coef(mlm0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      V1          V3
## (Intercept) -45.7660931 135.1150663
## V2           -0.2747666  -0.6559719
## V4            0.1455375  -1.0485195
## V5            0.6507081  -0.6319507&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that, we are sweeping &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; only over the predictors, but we also get the estimate of the intercept.
Remember that &lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt; is the result of sweeping G over the first position, which is the position where the intercept estimate appears.
You could obtain the same result by directly sweeping G over position 1, and the position of the predictors.
In code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Sweep G
  sweepGoodnight(G, c(1, sweep_over))[c(&amp;quot;int&amp;quot;, ivs), dvs]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              V1          V3
## int -45.7660931 135.1150663
## V2   -0.2747666  -0.6559719
## V4    0.1455375  -1.0485195
## V5    0.6507081  -0.6319507&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, you can think of finding the coefficients of a multivariate linear model using the sweep operator as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SWEEP(1, &lt;span class=&#34;math inline&#34;&gt;\(k_1, \dots, k_K\)&lt;/span&gt;)[G] or as,&lt;/li&gt;
&lt;li&gt;SWEEP(&lt;span class=&#34;math inline&#34;&gt;\(k_1, \dots, k_K\)&lt;/span&gt;)[SWEEP(1)[G]] or as,&lt;/li&gt;
&lt;li&gt;SWEEP(&lt;span class=&#34;math inline&#34;&gt;\(k_1, \dots, k_K\)&lt;/span&gt;)[&lt;span class=&#34;math inline&#34;&gt;\(\Theta\)&lt;/span&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with &lt;span class=&#34;math inline&#34;&gt;\(k_1, \dots, k_K\)&lt;/span&gt; being the positions of the &lt;span class=&#34;math inline&#34;&gt;\(K\)&lt;/span&gt; predictors in matrix &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Finally, just play around with what variables you consider as dvs and ivs.
You will discover the magic of the sweep operator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Play around with variable roles ------------------------------------------

  # Define different dependent variables (dvs) for the multivairate linear models
  dvs &amp;lt;- c(&amp;quot;V1&amp;quot;, &amp;quot;V2&amp;quot;, &amp;quot;V5&amp;quot;)

  # Define different predictors (ivs) for the multivairate linear models
  ivs &amp;lt;- c(&amp;quot;V3&amp;quot;, &amp;quot;V4&amp;quot;)

  # Create the formula (complicated but flexible way)
  formula_mlm &amp;lt;- paste0(&amp;quot;cbind(&amp;quot;,
                       paste0(dvs, collapse = &amp;quot;, &amp;quot;),
                       &amp;quot;) ~ &amp;quot;,
                       paste0(ivs, collapse = &amp;quot; + &amp;quot;))

  # Fit the model with the MLM
  mlm1 &amp;lt;- lm(formula_mlm, data = X)
  coef(mlm1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      V1         V2          V5
## (Intercept) 18.63186149 78.3607367 131.2824064
## V3          -0.75087203 -0.2686979  -1.1998512
## V4          -0.07777123 -0.9014841  -0.7246001&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Define positions to sweep over
  sweep_over &amp;lt;- which(colnames(Theta) %in% ivs)

  # Sweep Theta over new positions
  sweepGoodnight(Theta, K = sweep_over)[c(&amp;quot;int&amp;quot;, ivs), dvs]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              V1         V2          V5
## int 18.63186149 78.3607367 131.2824064
## V3  -0.75087203 -0.2686979  -1.1998512
## V4  -0.07777123 -0.9014841  -0.7246001&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tldr-just-give-me-the-code&#34; class=&#34;section level1&#34; number=&#34;3&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; TL;DR, just give me the code!&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Write an R function implementing SWEEP(k)[G] according to Goodnight ----------

sweepGoodnight &amp;lt;- function (G, K){

  for(k in K){
    # Step 1: Let D = g_kk
    D &amp;lt;- G[k, k]

    # Step 2: Divide row k by D.
    G[k, ] &amp;lt;- G[k, ] / D

    # Step 3:
    # - For every other row i != k, let B = g_ik
    # - Subtract B \times row k from row i.
    # - set g_ik = -B/D.
    for(i in 1:nrow(G)){
      if(i != k){
        B &amp;lt;- G[i, k]
        G[i, ] &amp;lt;- G[i, ] - B * G[k, ]
        G[i, k] &amp;lt;- -1 * B / D
      }
    }
    # Step 4: Set g_kk = 1/D
    G[k, k] = 1/D
  }

  # Output
  return(G)
}

# Compare sweepGoodnight with other implementations ----------------------------

# Install the `fastmatrix` package (run if you don&amp;#39;t have it yet)
# install.packages(&amp;quot;fastmatrix&amp;quot;)

# Load fastmatrix
library(fastmatrix)

# Define an example dataset
X &amp;lt;- matrix(c(1, 1, 1, 1,
              1, 2, 1, 3,
              1, 3, 1, 3,
              1, 1,-1, 2,
              1, 2,-1, 2,
              1, 3,-1, 1), ncol = 4, byrow = TRUE)

# Define the G matrix
G &amp;lt;- crossprod(X)

# Define a vector of positions to sweep over
K &amp;lt;- 1:3

# Perform SWEEP[K](G) with fastmatrix sweep.operator
H_fm &amp;lt;- sweep.operator(G, k = K)

# Perform SWEEP[K](G) with our sweepGoodnight implementation
H_sg &amp;lt;- sweepGoodnight(G, K = K)

# Compare the two
all.equal(H_fm, H_sg)

# Load Little Rubin data -------------------------------------------------------

# Create data
  X &amp;lt;- as.data.frame(
          matrix(
                  data = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10, 26,
                           29, 56, 31, 52, 55, 71 ,31, 54, 47, 40, 66, 68,
                           6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8,
                           60, 52, 20, 47, 33, 22,6,44,22,26,34,12,12,
                           78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7,
                           72.5, 93.1, 115.9, 83.8, 113.3, 109.4),
                  ncol = 5
          )
  )

# Store useful information
  n &amp;lt;- nrow(X)
  p &amp;lt;- ncol(X)

# Glance at the first 6 rows of the data
  head(X)

# Obtain the augmented covariance matrix ---------------------------------------

# Augment X
  X_aug &amp;lt;- cbind(int = 1, as.matrix(X))

# Glance at the first 6 rows of X_aug
  head(X_aug)

# Compute the matrix of sufficient statistics (T matrix)
  Tmat &amp;lt;- crossprod(X_aug)

# Compute G
  G &amp;lt;- Tmat / n

# Sweep G over the first position
  Theta &amp;lt;- sweepGoodnight(G, 1)

# Check how it looks
  Theta

# Check Theta is storing the means in the first row and column
  colMeans(X)

# Check Theta is storing the ML covariance matrix everywhere else
  cov(X) * (n-1) / n

# Fit some multivariate linear models ------------------------------------------

  # Define the dependent variables (dvs) of the multivairate linear models
  dvs &amp;lt;- c(&amp;quot;V1&amp;quot;, &amp;quot;V3&amp;quot;)

  # Define the predictors (ivs) of the multivairate linear models
  ivs &amp;lt;- c(&amp;quot;V2&amp;quot;, &amp;quot;V4&amp;quot;, &amp;quot;V5&amp;quot;)

  # Create the formula (complicated but flexible way)
  formula_mlm &amp;lt;- paste0(&amp;quot;cbind(&amp;quot;,
                       paste0(dvs, collapse = &amp;quot;, &amp;quot;),
                       &amp;quot;) ~ &amp;quot;,
                       paste0(ivs, collapse = &amp;quot; + &amp;quot;))

  # Check the formula
  formula_mlm

  # Fit the model with the lm function
  mlm0 &amp;lt;- lm(formula_mlm, data = X)
  coef(mlm0)

# Fit some multivariate linear models using sweep ------------------------------

  # Define positions to sweep over
  sweep_over &amp;lt;- which(colnames(Theta) %in% ivs)

  # Sweep theta
  H &amp;lt;- sweepGoodnight(Theta, K = sweep_over)

  # Check out the result
  H

  # Extract the regression coefficients from H
  H[c(&amp;quot;int&amp;quot;, ivs), dvs]

  # Compare with coefficients from lm function
  coef(mlm0)

  # Sweep G
  sweepGoodnight(G, c(1, sweep_over))[c(&amp;quot;int&amp;quot;, ivs), dvs]

# Play around with variable roles ------------------------------------------

  # Define different dependent variables (dvs) for the multivairate linear models
  dvs &amp;lt;- c(&amp;quot;V1&amp;quot;, &amp;quot;V2&amp;quot;, &amp;quot;V5&amp;quot;)

  # Define different predictors (ivs) for the multivairate linear models
  ivs &amp;lt;- c(&amp;quot;V3&amp;quot;, &amp;quot;V4&amp;quot;)

  # Create the formula (complicated but flexible way)
  formula_mlm &amp;lt;- paste0(&amp;quot;cbind(&amp;quot;,
                       paste0(dvs, collapse = &amp;quot;, &amp;quot;),
                       &amp;quot;) ~ &amp;quot;,
                       paste0(ivs, collapse = &amp;quot; + &amp;quot;))

  # Fit the model with the MLM
  mlm1 &amp;lt;- lm(formula_mlm, data = X)
  coef(mlm1)

  # Define positions to sweep over
  sweep_over &amp;lt;- which(colnames(Theta) %in% ivs)

  # Sweep Theta over new positions
  sweepGoodnight(Theta, K = sweep_over)[c(&amp;quot;int&amp;quot;, ivs), dvs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-goodnight:1979&#34; class=&#34;csl-entry&#34;&gt;
Goodnight, James H. 1979. &lt;span&gt;“A Tutorial on the SWEEP Operator.”&lt;/span&gt; &lt;em&gt;The American Statistician&lt;/em&gt; 33 (3): 149–58.
&lt;/div&gt;
&lt;div id=&#34;ref-littleRubin:2002&#34; class=&#34;csl-entry&#34;&gt;
Little, R. J. A., and D. B. Rubin. 2002. &lt;em&gt;Statistical Analysis with Missing Data&lt;/em&gt;. 2nd ed. Hoboken, NJ: Wiley-Interscience.
&lt;/div&gt;
&lt;div id=&#34;ref-schafer:1997&#34; class=&#34;csl-entry&#34;&gt;
Schafer, Joseph L. 1997. &lt;em&gt;Analysis of Incomplete Multivariate Data&lt;/em&gt;. Vol. 72. Boca Raton, FL: Chapman &amp;amp; Hall/&lt;span&gt;CRC&lt;/span&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
